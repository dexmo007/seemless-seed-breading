{"version":3,"file":"static/js/9.2dc736c6.chunk.js","mappings":"mMAKO,SAASA,EAAOC,GACrB,IAAKA,EAAOC,OACV,MAAM,IAAIC,MAAM,wCAElB,IAAMC,EAAIH,EAAOC,OACXG,EAAOJ,EAAOK,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAKJ,EAC9C,OAAOK,KAAKC,KACVT,EAAOU,KAAI,SAACC,GAAD,OAAOH,KAAKI,IAAID,EAAIP,EAAM,MAAIC,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,KAAKJ,GCVhE,SAASU,EAAuBC,EAAOC,GAE5C,IAAMC,EACJD,EAAeD,EAAMT,QAAO,SAACY,EAAKC,GAAN,OAAcD,EAAMC,EAAIC,MAAQ,IAAG,GAG3DC,EAAO,SAACC,GACZ,IAAMC,EAHY,SAACD,GAAD,OAClBA,EAAaP,EAAMT,QAAO,SAACY,EAAKC,GAAN,OAAcD,EAAMC,EAAIC,QAAO,GAE3CI,CAAYF,GAC1B,MAAO,CACLP,MAAOO,EACPC,MAAAA,EACAE,OAAQH,EAAaP,EAAMb,OAASqB,IAGxC,MAAO,CACLG,MAAOL,EAAKJ,GACZU,MAAON,EAAuC,EAAlCZ,KAAKkB,MAAMV,EAAkB,IACzCW,KAAMP,EAAsC,EAAjCZ,KAAKmB,KAAKX,EAAkB,KAIpC,SAASY,EACdd,EACAC,GAEC,IADDc,EACA,uDADU,CAAEC,MAAO,EAAGC,UAAW,IAE7BC,EAAUC,KAAKC,MACfC,EAAU,EACRC,EAAStB,EAAMJ,KAAI,qBAAGS,SACtBY,EAAY,GAClB,SAASM,EAAQC,EAASxB,EAAOyB,GAC/B,GAAKzB,GAA0B,IAAjBA,EAAMb,OAcpB,IAHA,IAAIuC,EAAI,EACFC,EAAO3B,EAAM,GACb4B,EAAO5B,EAAM6B,MAAM,IACjBF,EAAKtB,MAAQ,GAAKqB,EAAIX,EAAQC,OAASS,GAC7CF,EAAQ,GAAD,eACDC,GADC,CACQE,EAAIX,EAAQC,QACzBY,EACAH,GAAUE,EAAKtB,MAAQ,GAAKqB,EAAIX,EAAQC,OAE1CU,QApBF,CACEL,IACA,IAAMS,EAASN,EAAQjC,QACrB,SAACY,EAAKC,EAAKsB,GAAX,OAAiBvB,EAAMC,GAAOkB,EAAOI,GAAK,KAC1C,GAEEI,IAAW7B,GACbgB,EAAUc,KAAKP,IAgBrBD,EAAQ,GAAIvB,EAAOC,GACnB,IAAI+B,EAAkB,GACtB,GAAIf,EAAU9B,OAAQ,EAIpB6C,GAHAA,EAAkBf,EACfrB,KAAI,SAACqC,GAAD,MAAc,CAAEA,QAAAA,EAASC,MAAOjD,EAAOgD,OAC3CE,MAAK,uBAAGD,MAAH,EAAiBA,UACSL,MAAM,EAAGd,EAAQE,YACnCmB,SAAQ,SAACZ,EAASE,GAKhC,GAJAF,EAAQhB,MAAQgB,EAAQS,QAAQ1C,QAC9B,SAACY,EAAKC,EAAKsB,GAAX,OAAiBvB,EAAMC,EAAMkB,EAAOI,KACpC,GAEQ,IAANA,EAGF,OAFAF,EAAQa,KAAO,OACfb,EAAQc,YAAc,GAGxB,IAAMC,EAAWP,EAAgBN,EAAI,GACjCF,EAAQU,MAAQK,EAASL,OAC3BV,EAAQa,KAAOE,EAASF,KAAO,EAC/Bb,EAAQc,YAAc,IAEtBd,EAAQa,KAAOE,EAASF,KACxBb,EAAQc,YAAcC,EAASD,YAAc,MAGjD,IAAME,EAAYR,EAAgBzC,QAAO,SAACY,EAAKC,GAE7C,OADAD,EAAIC,EAAIiC,OAASlC,EAAIC,EAAIiC,OAAS,GAAK,EAChClC,IACN,IACH6B,EAAgBI,SAAQ,SAACK,GACvBA,EAAEC,SAAWF,EAAUC,EAAEJ,SAG7B,IAAMM,EAAWxB,KAAKC,MAAQF,EAC9B,MAAO,CACL0B,KAAMvB,EACNrB,MAAOA,EAAMJ,KAAI,qBAAGiD,MACpBC,cAAe7B,EAAU9B,OACzB8B,UAAWe,EACXW,SAAAA,G,aC7FG,SAASI,EAAT,GAA0D,IAA9B/C,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,aAAc+C,EAAQ,EAARA,KACtD,IAAKhD,IAAUC,EACb,MAAM,IAAIb,MACR,oBAAsB6D,KAAKC,UAAU,CAAElD,MAAAA,EAAOC,aAAAA,KAGlD,IAAMkD,EAAWnD,EAAMJ,KAAI,SAACiD,GAAD,MAAS,CAClCA,GAAAA,EACAxC,MAAO+C,EAAGC,MAAK,qBAAGC,IAAcC,SAASV,MAAKxC,UAGhD,MAAO,CACL2C,KAAAA,EACAQ,cAH0BzD,EAAuBoD,EAAUlD,GAI3DwD,MAAO3C,EAAaqC,EAAUlD","sources":["lib/statistics.js","lib/engine.js","engine.worker.js"],"sourcesContent":["/**\n *\n * @param {number[]} values\n * @returns {number}\n */\nexport function stddev(values) {\n  if (!values.length) {\n    throw new Error('cannot compute stddev of empty array');\n  }\n  const n = values.length;\n  const mean = values.reduce((a, b) => a + b) / n;\n  return Math.sqrt(\n    values.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n\n  );\n}\n","import { stddev } from './statistics';\n\nexport function calculateAllEqualParts(seeds, soakerWeight) {\n  // all equal parts\n  const exactSeedWeight =\n    soakerWeight / seeds.reduce((acc, cur) => acc + cur.scale + 1, 0);\n  const waterWeight = (seedWeight) =>\n    seedWeight * seeds.reduce((acc, cur) => acc + cur.scale, 0);\n  const calc = (seedWeight) => {\n    const water = waterWeight(seedWeight);\n    return {\n      seeds: seedWeight,\n      water,\n      soaker: seedWeight * seeds.length + water,\n    };\n  };\n  return {\n    exact: calc(exactSeedWeight),\n    floor: calc(Math.floor(exactSeedWeight / 5) * 5),\n    ceil: calc(Math.ceil(exactSeedWeight / 5) * 5),\n  };\n}\n\nexport function calculateAll(\n  seeds,\n  soakerWeight,\n  options = { steps: 5, solutions: 20 }\n) {\n  let started = Date.now();\n  let counter = 0;\n  const scales = seeds.map(({ scale }) => scale);\n  const solutions = [];\n  function recurse(current, seeds, target) {\n    if (!seeds || seeds.length === 0) {\n      counter++;\n      const actual = current.reduce(\n        (acc, cur, i) => acc + cur * (scales[i] + 1),\n        0\n      );\n      if (actual === soakerWeight) {\n        solutions.push(current);\n      }\n      return;\n    }\n    let i = 1;\n    const seed = seeds[0];\n    const rest = seeds.slice(1);\n    while ((seed.scale + 1) * i * options.steps <= target) {\n      recurse(\n        [...current, i * options.steps],\n        rest,\n        target - (seed.scale + 1) * i * options.steps\n      );\n      i++;\n    }\n  }\n  recurse([], seeds, soakerWeight);\n  let rankedSolutions = [];\n  if (solutions.length) {\n    rankedSolutions = solutions\n      .map((weights) => ({ weights, sigma: stddev(weights) }))\n      .sort(({ sigma: a }, { sigma: b }) => a - b);\n    rankedSolutions = rankedSolutions.slice(0, options.solutions);\n    rankedSolutions.forEach((current, i) => {\n      current.water = current.weights.reduce(\n        (acc, cur, i) => acc + cur * scales[i],\n        0\n      );\n      if (i === 0) {\n        current.rank = 1;\n        current.indexInRank = 0;\n        return;\n      }\n      const previous = rankedSolutions[i - 1];\n      if (current.sigma > previous.sigma) {\n        current.rank = previous.rank + 1;\n        current.indexInRank = 0;\n      } else {\n        current.rank = previous.rank;\n        current.indexInRank = previous.indexInRank + 1;\n      }\n    });\n    const rankSizes = rankedSolutions.reduce((acc, cur) => {\n      acc[cur.rank] = (acc[cur.rank] || 0) + 1;\n      return acc;\n    }, {});\n    rankedSolutions.forEach((e) => {\n      e.rankSize = rankSizes[e.rank];\n    });\n  }\n  const duration = Date.now() - started;\n  return {\n    runs: counter,\n    seeds: seeds.map(({ id }) => id),\n    solutionCount: solutions.length,\n    solutions: rankedSolutions,\n    duration,\n  };\n}\n","import { calculateAllEqualParts, calculateAll } from './lib/engine';\nimport db from './db.json';\n\nexport function calculateWeights({ seeds, soakerWeight, hash }) {\n  if (!seeds || !soakerWeight) {\n    throw new Error(\n      'invalid message: ' + JSON.stringify({ seeds, soakerWeight })\n    );\n  }\n  const seedData = seeds.map((id) => ({\n    id,\n    scale: db.find(({ ids }) => ids.includes(id)).scale,\n  }));\n  const allEqualPartsResult = calculateAllEqualParts(seedData, soakerWeight);\n  return {\n    hash,\n    allEqualParts: allEqualPartsResult,\n    round: calculateAll(seedData, soakerWeight),\n  };\n}\n"],"names":["stddev","values","length","Error","n","mean","reduce","a","b","Math","sqrt","map","x","pow","calculateAllEqualParts","seeds","soakerWeight","exactSeedWeight","acc","cur","scale","calc","seedWeight","water","waterWeight","soaker","exact","floor","ceil","calculateAll","options","steps","solutions","started","Date","now","counter","scales","recurse","current","target","i","seed","rest","slice","actual","push","rankedSolutions","weights","sigma","sort","forEach","rank","indexInRank","previous","rankSizes","e","rankSize","duration","runs","id","solutionCount","calculateWeights","hash","JSON","stringify","seedData","db","find","ids","includes","allEqualParts","round"],"sourceRoot":""}